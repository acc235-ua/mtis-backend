/*
 * Incident Management API
 * API para la gestión de incidentes, partes de seguros y evidencias.
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.68
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";
import Reclamacion from '../model/Reclamacion';

/**
* Reclamaciones service.
* @module api/ReclamacionesApi
* @version 1.0.0
*/
export default class ReclamacionesApi {

    /**
    * Constructs a new ReclamacionesApi. 
    * @alias module:api/ReclamacionesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the reclamacionIdReclamacionClienteIdGet operation.
     * @callback moduleapi/ReclamacionesApi~reclamacionIdReclamacionClienteIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Reclamacion{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Consulta si la poliza del cliente cubre la reclamación
     * @param {Number} idReclamacion 
     * @param {String} cliente 
     * @param {Number} id 
     * @param {module:api/ReclamacionesApi~reclamacionIdReclamacionClienteIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    reclamacionIdReclamacionClienteIdGet(idReclamacion, cliente, id, callback) {
      
      let postBody = null;
      // verify the required parameter 'idReclamacion' is set
      if (idReclamacion === undefined || idReclamacion === null) {
        throw new Error("Missing the required parameter 'idReclamacion' when calling reclamacionIdReclamacionClienteIdGet");
      }
      // verify the required parameter 'cliente' is set
      if (cliente === undefined || cliente === null) {
        throw new Error("Missing the required parameter 'cliente' when calling reclamacionIdReclamacionClienteIdGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling reclamacionIdReclamacionClienteIdGet");
      }

      let pathParams = {
        'id_Reclamacion': idReclamacion,'cliente': cliente,'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Reclamacion;

      return this.apiClient.callApi(
        '/reclamacion/{id_Reclamacion}/{cliente}/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}