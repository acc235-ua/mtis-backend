/*
 * Incident Management API
 * API para la gesti√≥n de incidentes, partes de seguros y evidencias.
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.68
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";
import ListaInc from '../model/ListaInc';

/**
* Incidencias service.
* @module api/IncidenciasApi
* @version 1.0.0
*/
export default class IncidenciasApi {

    /**
    * Constructs a new IncidenciasApi. 
    * @alias module:api/IncidenciasApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the incidenceContractuserNifTypeIncidenceGet operation.
     * @callback moduleapi/IncidenciasApi~incidenceContractuserNifTypeIncidenceGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Constracta incidencias
     * Constracta incidencias
     * @param {String} userNif 
     * @param {String} typeIncidence 
     * @param {module:api/IncidenciasApi~incidenceContractuserNifTypeIncidenceGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    incidenceContractuserNifTypeIncidenceGet(userNif, typeIncidence, callback) {
      
      let postBody = null;
      // verify the required parameter 'userNif' is set
      if (userNif === undefined || userNif === null) {
        throw new Error("Missing the required parameter 'userNif' when calling incidenceContractuserNifTypeIncidenceGet");
      }
      // verify the required parameter 'typeIncidence' is set
      if (typeIncidence === undefined || typeIncidence === null) {
        throw new Error("Missing the required parameter 'typeIncidence' when calling incidenceContractuserNifTypeIncidenceGet");
      }

      let pathParams = {
        'user_nif': userNif,'type_incidence': typeIncidence
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/incidence/contract{user_nif}/{type_incidence}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the incidenceRecentuserNifPost operation.
     * @callback moduleapi/IncidenciasApi~incidenceRecentuserNifPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListaInc{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Devuelve las ultimas incidencias
     * Devuelve las ultimas incidencias
     * @param {String} userNif 
     * @param {module:api/IncidenciasApi~incidenceRecentuserNifPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    incidenceRecentuserNifPost(userNif, callback) {
      
      let postBody = null;
      // verify the required parameter 'userNif' is set
      if (userNif === undefined || userNif === null) {
        throw new Error("Missing the required parameter 'userNif' when calling incidenceRecentuserNifPost");
      }

      let pathParams = {
        'user_nif': userNif
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListaInc;

      return this.apiClient.callApi(
        '/incidence/recent{user_nif}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the incidenceTypefileInfGet operation.
     * @callback moduleapi/IncidenciasApi~incidenceTypefileInfGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Comprueba el tipo de dato
     * Comprueba el tipo de dato
     * @param {String} fileInf 
     * @param {module:api/IncidenciasApi~incidenceTypefileInfGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    incidenceTypefileInfGet(fileInf, callback) {
      
      let postBody = null;
      // verify the required parameter 'fileInf' is set
      if (fileInf === undefined || fileInf === null) {
        throw new Error("Missing the required parameter 'fileInf' when calling incidenceTypefileInfGet");
      }

      let pathParams = {
        'file_inf': fileInf
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/incidence/type{file_inf}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}