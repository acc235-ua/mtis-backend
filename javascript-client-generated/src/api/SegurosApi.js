/*
 * Incident Management API
 * API para la gestión de incidentes, partes de seguros y evidencias.
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.68
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";
import Seguro from '../model/Seguro';

/**
* Seguros service.
* @module api/SegurosApi
* @version 1.0.0
*/
export default class SegurosApi {

    /**
    * Constructs a new SegurosApi. 
    * @alias module:api/SegurosApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the seguroClienteGet operation.
     * @callback moduleapi/SegurosApi~seguroClienteGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Seguro{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Consultar seguros de un cliente
     * Consulta todos los seguros de un cliente
     * @param {String} cliente 
     * @param {module:api/SegurosApi~seguroClienteGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    seguroClienteGet(cliente, callback) {
      
      let postBody = null;
      // verify the required parameter 'cliente' is set
      if (cliente === undefined || cliente === null) {
        throw new Error("Missing the required parameter 'cliente' when calling seguroClienteGet");
      }

      let pathParams = {
        'cliente': cliente
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Seguro;

      return this.apiClient.callApi(
        '/seguro/{cliente}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the seguroClienteIdGet operation.
     * @callback moduleapi/SegurosApi~seguroClienteIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Seguro{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Consultar seguro de un cliente
     * Consulta un único seguro de un cliente
     * @param {String} cliente 
     * @param {Number} id 
     * @param {module:api/SegurosApi~seguroClienteIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    seguroClienteIdGet(cliente, id, callback) {
      
      let postBody = null;
      // verify the required parameter 'cliente' is set
      if (cliente === undefined || cliente === null) {
        throw new Error("Missing the required parameter 'cliente' when calling seguroClienteIdGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling seguroClienteIdGet");
      }

      let pathParams = {
        'cliente': cliente,'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Seguro;

      return this.apiClient.callApi(
        '/seguro/{cliente}/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the seguroClienteIdPut operation.
     * @callback moduleapi/SegurosApi~seguroClienteIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Seguro{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Actualizar un seguro de un cliente
     * Actualiza un seguro de un cliente
     * @param {module:model/Seguro} body 
     * @param {String} cliente 
     * @param {Number} id 
     * @param {module:api/SegurosApi~seguroClienteIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    seguroClienteIdPut(body, cliente, id, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling seguroClienteIdPut");
      }
      // verify the required parameter 'cliente' is set
      if (cliente === undefined || cliente === null) {
        throw new Error("Missing the required parameter 'cliente' when calling seguroClienteIdPut");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling seguroClienteIdPut");
      }

      let pathParams = {
        'cliente': cliente,'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Seguro;

      return this.apiClient.callApi(
        '/seguro/{cliente}/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the seguroPost operation.
     * @callback moduleapi/SegurosApi~seguroPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Seguro{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Crear un seguro
     * Crea un nuevo seguro a partir de datos
     * @param {module:model/Seguro} body 
     * @param {module:api/SegurosApi~seguroPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    seguroPost(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling seguroPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Seguro;

      return this.apiClient.callApi(
        '/seguro', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the seguroPrecioPost operation.
     * @callback moduleapi/SegurosApi~seguroPrecioPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Seguro{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Calcular precio
     * Calcula el precio de un seguro segun sus datos
     * @param {module:model/Seguro} body 
     * @param {module:api/SegurosApi~seguroPrecioPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    seguroPrecioPost(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling seguroPrecioPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Seguro;

      return this.apiClient.callApi(
        '/seguroPrecio', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}